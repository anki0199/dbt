-- Create Worker table
CREATE TABLE Worker (
    WORKER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    SALARY INT,
    JOINING_DATE DATETIME,
    DEPARTMENT VARCHAR(255)
);

-- Insert data into Worker table
INSERT INTO Worker (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT)
VALUES
(1, 'Monika', 'Arora', 100000, '2014-02-20 09:00:00', 'HR'),
(2, 'Niharika', 'Verma', 80000, '2014-06-11 09:00:00', 'Admin'),
(3, 'Vishal', 'Singhal', 300000, '2014-02-20 09:00:00', 'HR'),
(4, 'Amitabh', 'Singh', 500000, '2014-02-20 09:00:00', 'Admin'),
(5, 'Vivek', 'Bhati', 500000, '2014-06-11 09:00:00', 'Admin'),
(6, 'Vipul', 'Diwan', 200000, '2014-06-11 09:00:00', 'Account'),
(7, 'Satish', 'Kumar', 75000, '2014-01-20 09:00:00', 'Account'),
(8, 'Geetika', 'Chauhan', 90000, '2014-04-11 09:00:00', 'Admin');


-- Create Bonus table
CREATE TABLE Bonus (
    WORKER_REF_ID INT,
    BONUS_DATE DATETIME,
    BONUS_AMOUNT INT,
	FOREIGN KEY (WORKER_REF_ID) REFERENCES Worker(WORKER_ID) ON DELETE CASCADE
);

-- Insert data into Bonus table
INSERT INTO Bonus (WORKER_REF_ID, BONUS_DATE, BONUS_AMOUNT)
VALUES
(1, '2016-02-20 00:00:00', 5000),
(2, '2016-06-11 00:00:00', 3000),
(3, '2016-02-20 00:00:00', 4000),
(1, '2016-02-20 00:00:00', 4500),
(2, '2016-06-11 00:00:00', 3500);


-- Create Title table
CREATE TABLE Title (
    WORKER_REF_ID INT,
    WORKER_TITLE VARCHAR(255),
    AFFECTED_FROM DATETIME,
    FOREIGN KEY (WORKER_REF_ID) REFERENCES Worker(WORKER_ID) ON DELETE CASCADE
);

-- Insert data into Title table
INSERT INTO Title (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM)
VALUES
(1, 'Manager', '2016-02-20 00:00:00'),
(2, 'Executive', '2016-06-11 00:00:00'),
(8, 'Executive', '2016-06-11 00:00:00'),
(5, 'Manager', '2016-06-11 00:00:00'),
(4, 'Asst. Manager', '2016-06-11 00:00:00'),
(7, 'Executive', '2016-06-11 00:00:00'),
(6, 'Lead', '2016-06-11 00:00:00'),
(3, 'Lead', '2016-06-11 00:00:00');
------------------------------------------------------------------------------------------

1. Write an SQL query to fetch “FIRST_NAME” from the Worker table using the
alias name <WORKER_NAME>.
mysql> SELECT first_name AS WORKER_NAME
    -> FROM Worker;
+-------------+
| WORKER_NAME |
+-------------+
| Monika      |
| Niharika    |
| Vishal      |
| Amitabh     |
| Vivek       |
| Vipul       |
| Satish      |
| Geetika     |
+-------------+
8 rows in set (0.00 sec)


2. Write an SQL query to fetch “FIRST_NAME” from the Worker table in upper
case.
mysql> SELECT upper(first_name)
    -> FROM Worker;
+-------------------+
| upper(first_name) |
+-------------------+
| MONIKA            |
| NIHARIKA          |
| VISHAL            |
| AMITABH           |
| VIVEK             |
| VIPUL             |
| SATISH            |
| GEETIKA           |
+-------------------+
8 rows in set (0.01 sec)


3. Write an SQL query to fetch unique values of DEPARTMENT from the Worker
table.
mysql> SELECT DISTINCT DEPARTMENT FROM Worker;
+------------+
| DEPARTMENT |
+------------+
| HR         |
| Admin      |
| Account    |
+------------+
3 rows in set (0.01 sec)


4. Write an SQL query to print the first three characters of FIRST_NAME from the
Worker table.
mysql> SELECT LEFT(FIRST_NAME, 3) FROM Worker;
+---------------------+
| LEFT(FIRST_NAME, 3) |
+---------------------+
| Mon                 |
| Nih                 |
| Vis                 |
| Ami                 |
| Viv                 |
| Vip                 |
| Sat                 |
| Gee                 |
+---------------------+
8 rows in set (0.00 sec)


5. Write an SQL query to find the position of the alphabet (‘a’) in the first name
column ‘Amitabh’ from the Worker table.
mysql> SELECT instr(first_name,'a'), first_name
    -> FROM Worker;
+-----------------------+------------+
| instr(first_name,'a') | first_name |
+-----------------------+------------+
|                     6 | Monika     |
|                     4 | Niharika   |
|                     5 | Vishal     |
|                     1 | Amitabh    |
|                     0 | Vivek      |
|                     0 | Vipul      |
|                     2 | Satish     |
|                     7 | Geetika    |
+-----------------------+------------+
8 rows in set (0.00 sec)


6. Write an SQL query to print all Worker details from the Worker table order by
FIRST_NAME Ascending.
mysql> SELECT * FROM Worker ORDER BY FIRST_NAME ASC;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.01 sec)


7. Write an SQL query to print all Worker details from the Worker table order by
FIRST_NAME Ascending and DEPARTMENT Descending.
mysql> SELECT * FROM Worker ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)


8. Write an SQL query to print details for Workers with the first names “Vipul” and
“Satish” from the Worker table.
mysql> SELECT * FROM Worker WHERE FIRST_NAME IN ('Vipul', 'Satish');
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
+-----------+------------+-----------+--------+---------------------+------------+
2 rows in set (0.00 sec)

9. Write an SQL query to print details of workers excluding first names, “Vipul” and
“Satish” from the Worker table.
mysql> SELECT * FROM Worker WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
6 rows in set (0.00 sec)


10. Write an SQL query to print details of Workers with DEPARTMENT name as
“Admin”.
mysql> SELECT * FROM Worker WHERE DEPARTMENT = 'Admin';
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
4 rows in set (0.00 sec)


11. Write an SQL query to print details of the Workers whose FIRST_NAME contains
‘a’.
mysql> SELECT * FROM Worker WHERE FIRST_NAME LIKE '%a%';
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
6 rows in set (0.00 sec)


12. Write an SQL query to print names of the Workers whose FIRST_NAME ends
with ‘a’.
mysql> SELECT * FROM Worker WHERE FIRST_NAME LIKE '%a';
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
3 rows in set (0.00 sec)


13. Write an SQL query to print details of the Workers whose FIRST_NAME ends
with ‘h’ and contains six alphabets.
mysql> SELECT * FROM Worker WHERE FIRST_NAME LIKE '______h';
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
1 row in set (0.00 sec)


14. Write an SQL query to print details of the Workers whose SALARY lies between
100000 and 500000.
mysql> SELECT * FROM Worker WHERE SALARY BETWEEN 100000 AND 500000;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
+-----------+------------+-----------+--------+---------------------+------------+
5 rows in set (0.00 sec)


15. Write an SQL query to print details of the Workers who joined in Feb’2014.
mysql> SELECT * FROM Worker WHERE  year(JOINING_DATE)=2014 AND month(JOINING_DATE)=2;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
3 rows in set (0.01 sec)


16. Write an SQL query to fetch the count of employees working in the department
‘Admin’.
mysql> SELECT COUNT(*) FROM Worker WHERE DEPARTMENT = 'Admin';
+----------+
| COUNT(*) |
+----------+
|        4 |
+----------+
1 row in set (0.00 sec)


17. Write an SQL query to fetch worker names with salaries >= 50000 and <=
100000.
mysql> SELECT FIRST_NAME FROM Worker WHERE SALARY BETWEEN 50000 AND 100000;
+------------+
| FIRST_NAME |
+------------+
| Monika     |
| Niharika   |
| Satish     |
| Geetika    |
+------------+
4 rows in set (0.00 sec)


18. Write an SQL query to fetch the no. of workers for each department in
descending order.
mysql> SELECT DEPARTMENT, COUNT(*) AS NUM_WORKERS FROM Worker GROUP BY DEPARTMENT ORDER BY NUM_WORKERS DESC;
+------------+-------------+
| DEPARTMENT | NUM_WORKERS |
+------------+-------------+
| Admin      |           4 |
| HR         |           2 |
| Account    |           2 |
+------------+-------------+
3 rows in set (0.00 sec)


19. Write an SQL query to print details of the Workers who are also Managers.

mysql> SELECT * FROM Worker w JOIN Title t ON w.WORKER_ID = t.WORKER_REF_ID WHERE t.WORKER_TITLE = 'Manager';
+-----------+------------+-----------+--------+---------------------+------------+---------------+--------------+---------------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT | WORKER_REF_ID | WORKER_TITLE | AFFECTED_FROM       |
+-----------+------------+-----------+--------+---------------------+------------+---------------+--------------+---------------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |             1 | Manager      | 2016-02-20 00:00:00 |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |             5 | Manager      | 2016-06-11 00:00:00 |
+-----------+------------+-----------+--------+---------------------+------------+---------------+--------------+---------------------+
2 rows in set (0.00 sec)
20. Write an SQL query to fetch duplicate records having matching data in some
fields of a table.
mysql> SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*) FROM Title
    -> GROUP BY WORKER_TITLE, AFFECTED_FROM
    -> HAVING COUNT(*) > 1;
+--------------+---------------------+----------+
| WORKER_TITLE | AFFECTED_FROM       | COUNT(*) |
+--------------+---------------------+----------+
| Executive    | 2016-06-11 00:00:00 |        3 |
| Lead         | 2016-06-11 00:00:00 |        2 |
+--------------+---------------------+----------+
2 rows in set (0.00 sec)


21. Write an SQL query to show only odd rows from a table.
mysql> SELECT * FROM (SELECT *, ROW_NUMBER() OVER () AS RowNum FROM Worker) AS SubQuery WHERE RowNum % 2 <> 0;
+-----------+------------+-----------+--------+---------------------+------------+--------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT | RowNum |
+-----------+------------+-----------+--------+---------------------+------------+--------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |      1 |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |      3 |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |      5 |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |      7 |
+-----------+------------+-----------+--------+---------------------+------------+--------+
4 rows in set (0.01 sec)


22. Write an SQL query to show only even rows from a table.
mysql> SELECT * FROM (SELECT *, ROW_NUMBER() OVER () AS RowNum FROM Worker) AS SubQuery WHERE RowNum % 2 = 0;
+-----------+------------+-----------+--------+---------------------+------------+--------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT | RowNum |
+-----------+------------+-----------+--------+---------------------+------------+--------+
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |      2 |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |      4 |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |      6 |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |      8 |
+-----------+------------+-----------+--------+---------------------+------------+--------+
4 rows in set (0.00 sec)


23. Write an SQL query to clone a new table from another table.
mysql> CREATE TABLE WorkerClone like Worker;
Query OK, 0 rows affected (0.04 sec)

mysql> desc WorkerClone;
+--------------+----------+------+-----+---------+----------------+
| Field        | Type     | Null | Key | Default | Extra          |
+--------------+----------+------+-----+---------+----------------+
| WORKER_ID    | int      | NO   | PRI | NULL    | auto_increment |
| FIRST_NAME   | char(25) | YES  |     | NULL    |                |
| LAST_NAME    | char(25) | YES  |     | NULL    |                |
| SALARY       | int      | YES  |     | NULL    |                |
| JOINING_DATE | datetime | YES  |     | NULL    |                |
| DEPARTMENT   | char(25) | YES  |     | NULL    |                |
+--------------+----------+------+-----+---------+----------------+
6 rows in set (0.02 sec)
mysql> INSERT INTO WorkerClone
    -> select * from Worker;
Query OK, 8 rows affected (0.01 sec)
Records: 8  Duplicates: 0  Warnings: 0


24. Write an SQL query to fetch intersecting records of previous two tables.
mysql> SELECT * FROM Worker
    -> INNER JOIN WorkerClone ON Worker.WORKER_ID = WorkerClone.WORKER_ID;
+-----------+------------+-----------+--------+---------------------+------------+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT | WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)


25. Write an SQL query to show records from one table that another table does not
have.
mysql> SELECT * FROM Worker WHERE WORKER_ID NOT IN (SELECT WORKER_REF_ID FROM Bonus );
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
5 rows in set (0.00 sec)

26. Write an SQL query to show the top n (say 10) records of a table.
mysql> SELECT * FROM Worker ORDER BY Salary LIMIT 10;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)

27. Write an SQL query to fetch the list of employees with the same salary.
mysql> Select distinct W.WORKER_ID, W.FIRST_NAME, W.Salary from Worker W, Worker W1
    -> where W.Salary = W1.Salary
    -> and W.WORKER_ID != W1.WORKER_ID;
+-----------+------------+--------+
| WORKER_ID | FIRST_NAME | Salary |
+-----------+------------+--------+
|         5 | Vivek      | 500000 |
|         4 | Amitabh    | 500000 |
+-----------+------------+--------+
2 rows in set (0.00 sec)


28. Write an SQL query to show the second-highest salary from a table.
mysql> Select max(Salary)
    -> from Worker
    -> where Salary not in (Select max(Salary) from Worker);
+-------------+
| max(Salary) |
+-------------+
|      300000 |
+-------------+
1 row in set (0.00 sec)


29. Write an SQL query to fetch intersecting records of two tables.
mysql> SELECT Worker.*
    -> FROM Worker
    -> INNER JOIN WorkerClone ON Worker.WORKER_ID = WorkerClone.WORKER_ID;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)

30. Write an SQL query to fetch the first 50% of records from a table.
mysql> SELECT * FROM Worker WHERE WORKER_ID <= (SELECT count(WORKER_ID)/2 from Worker);
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
|         2 | Niharika   | Verma     |  80000 | 2014-06-11 09:00:00 | Admin      |
|         3 | Vishal     | Singhal   | 300000 | 2014-02-20 09:00:00 | HR         |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
4 rows in set (0.00 sec)


31. Write an SQL query to fetch the departments that have less than five people in
them.
mysql> SELECT DEPARTMENT, COUNT(WORKER_ID) as 'Number of Workers'
    -> FROM Worker
    -> GROUP BY DEPARTMENT
    -> HAVING COUNT(WORKER_ID) < 5;
+------------+-------------------+
| DEPARTMENT | Number of Workers |
+------------+-------------------+
| HR         |                 2 |
| Admin      |                 4 |
| Account    |                 2 |
+------------+-------------------+
3 rows in set (0.00 sec)


32. Write an SQL query to show all departments along with the number of people in
there.
mysql> SELECT DEPARTMENT, COUNT(DEPARTMENT) as 'Number of Workers'
    -> FROM Worker
    -> GROUP BY DEPARTMENT;
+------------+-------------------+
| DEPARTMENT | Number of Workers |
+------------+-------------------+
| HR         |                 2 |
| Admin      |                 4 |
| Account    |                 2 |
+------------+-------------------+
3 rows in set (0.00 sec)

33. Write an SQL query to show the last record from a table.
mysql> Select *
    -> from Worker
    -> where WORKER_ID = (
    -> SELECT max(WORKER_ID) from Worker);
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
1 row in set (0.00 sec)

mysql> SELECT * FROM Worker ORDER BY WORKER_ID DESC LIMIT 1;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
1 row in set (0.00 sec)

34. Write an SQL query to fetch the first row of a table.
mysql> SELECT * FROM Worker LIMIT 1;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
+-----------+------------+-----------+--------+---------------------+------------+
1 row in set (0.00 sec)

mysql> Select *
    -> from Worker
    -> where WORKER_ID = (SELECT min(WORKER_ID) from Worker);
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         1 | Monika     | Arora     | 100000 | 2014-02-20 09:00:00 | HR         |
+-----------+------------+-----------+--------+---------------------+------------+
1 row in set (0.00 sec)

35. Write an SQL query to fetch the last five records from a table.
mysql> SELECT * FROM Worker ORDER BY WORKER_ID DESC LIMIT 5;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|         8 | Geetika    | Chauhan   |  90000 | 2014-04-11 09:00:00 | Admin      |
|         7 | Satish     | Kumar     |  75000 | 2014-01-20 09:00:00 | Account    |
|         6 | Vipul      | Diwan     | 200000 | 2014-06-11 09:00:00 | Account    |
|         5 | Vivek      | Bhati     | 500000 | 2014-06-11 09:00:00 | Admin      |
|         4 | Amitabh    | Singh     | 500000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
5 rows in set (0.00 sec)


36. Write an SQL query to print the name of employees having the highest salary in
each department.
mysql> SELECT t.DEPARTMENT,t.FIRST_NAME,t.Salary
    -> from(SELECT max(Salary) as TotalSalary,DEPARTMENT from Worker group by DEPARTMENT) as TempNew
    -> Inner Join Worker t
    -> on TempNew.DEPARTMENT=t.DEPARTMENT and TempNew.TotalSalary=t.Salary;
+------------+------------+--------+
| DEPARTMENT | FIRST_NAME | Salary |
+------------+------------+--------+
| HR         | Vishal     | 300000 |
| Admin      | Amitabh    | 500000 |
| Admin      | Vivek      | 500000 |
| Account    | Vipul      | 200000 |
+------------+------------+--------+
4 rows in set (0.00 sec)

37. Write an SQL query to fetch three max salaries from a table.
mysql> SELECT DISTINCT SALARY
    -> FROM Worker
    -> ORDER BY SALARY DESC
    -> LIMIT 3;
+--------+
| SALARY |
+--------+
| 500000 |
| 300000 |
| 200000 |
+--------+
3 rows in set (0.00 sec)


38. Write an SQL query to fetch departments along with the total salaries paid for
each of them.
mysql> SELECT DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY
    -> FROM Worker
    -> GROUP BY DEPARTMENT;
+------------+--------------+
| DEPARTMENT | TOTAL_SALARY |
+------------+--------------+
| HR         |       400000 |
| Admin      |      1170000 |
| Account    |       275000 |
+------------+--------------+
3 rows in set (0.00 sec)

39. Write an SQL query to fetch the names of workers who earn the highest salary.
mysql> SELECT FIRST_NAME, LAST_NAME, SALARY
    -> FROM Worker
    -> WHERE SALARY = (SELECT MAX(SALARY) FROM Worker);
+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Amitabh    | Singh     | 500000 |
| Vivek      | Bhati     | 500000 |
+------------+-----------+--------+
2 rows in set (0.00 sec)

------------------------------------------------------------------------------------------



